{"version":3,"file":"JsonFormatter.stories-23b06c4d.js","sources":["../../src/index.tsx"],"sourcesContent":["import React, { CSSProperties, useMemo, useCallback } from 'react'\n\nexport type JsonObject =\n  | { [key: string]: JsonObject }\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n\ninterface JsonStyle {\n  booleanStyle?: CSSProperties\n  braceStyle?: CSSProperties\n  bracketStyle?: CSSProperties\n  commaStyle?: CSSProperties\n  falseStyle?: CSSProperties\n  nullStyle?: CSSProperties\n  numberStyle?: CSSProperties\n  propertyStyle?: CSSProperties\n  stringStyle?: CSSProperties\n  style?: CSSProperties\n  tabSpaceStyle?: CSSProperties\n  trueStyle?: CSSProperties\n}\n\ninterface JsonClassName {\n  booleanClassName?: string\n  braceClassName?: string\n  bracketClassName?: string\n  className?: string\n  commaClassName?: string\n  falseClassName?: string\n  nullClassName?: string\n  numberClassName?: string\n  propertyClassName?: string\n  stringClassName?: string\n  tabSpaceClassName?: string\n  trueClassName?: string\n}\n\nexport interface JsonFormatterProps {\n  /**\n   * The JSON data to be formatted.\n   */\n  json: string\n  /**\n   * Optional class names for different elements of the JSON formatter.\n   */\n  jsonClassName?: JsonClassName\n  /**\n   * Optional inline styles for different elements of the JSON formatter.\n   */\n  jsonStyle?: JsonStyle\n  /**\n   * The width of the tab space. Default is 2.\n   */\n  tabWith?: number\n}\n\n/**\n * A React component that formats and displays JSON data in a styled manner.\n */\nexport default function JsonFormatter({\n  json,\n  jsonClassName: {\n    booleanClassName = '',\n    braceClassName = '',\n    bracketClassName = '',\n    className = '',\n    commaClassName = '',\n    falseClassName = '',\n    nullClassName = '',\n    numberClassName = '',\n    propertyClassName = '',\n    stringClassName = '',\n    tabSpaceClassName = '',\n    trueClassName = ''\n  } = {},\n  jsonStyle: {\n    booleanStyle = {},\n    braceStyle = {},\n    bracketStyle = {},\n    commaStyle = {},\n    falseStyle = {},\n    nullStyle = {},\n    numberStyle = {},\n    propertyStyle = {},\n    stringStyle = {},\n    style = {},\n    tabSpaceStyle = {},\n    trueStyle = {}\n  } = {},\n  tabWith = 2\n}: JsonFormatterProps): JSX.Element {\n  const jsonObject: JsonObject = useMemo(() => JSON.parse(json), [json])\n\n  const repeatTabSpace = useCallback(\n    (times: number): JSX.Element => (\n      <span className={tabSpaceClassName} style={tabSpaceStyle}>\n        {'\\xa0'.repeat(tabWith * times)}\n      </span>\n    ),\n    [tabSpaceClassName, tabSpaceStyle, tabWith]\n  )\n\n  const categorize = useCallback(\n    (\n      data: JsonObject,\n      tabSpaceRepeatTimes: number\n    ): JSX.Element | JSX.Element[] => {\n      switch (Object.prototype.toString.call(data)) {\n        case '[object Number]': {\n          return (\n            <span className={numberClassName} style={numberStyle}>\n              {data as number}\n            </span>\n          )\n        }\n\n        case '[object String]': {\n          return (\n            <span\n              className={stringClassName}\n              style={stringStyle}\n            >{`\"${data}\"`}</span>\n          )\n        }\n\n        case '[object Boolean]': {\n          const dataJSX = data ? (\n            <span\n              className={`${booleanClassName} ${trueClassName}`}\n              style={{ ...booleanStyle, ...trueStyle }}\n            >\n              true\n            </span>\n          ) : (\n            <span\n              className={`${booleanClassName} ${falseClassName}`}\n              style={{ ...booleanStyle, ...falseStyle }}\n            >\n              false\n            </span>\n          )\n          return dataJSX\n        }\n\n        case '[object Object]': {\n          return (\n            <React.Fragment>\n              <span className={braceClassName} style={braceStyle}>\n                {'{'}\n              </span>\n              <br />\n              {Object.entries(data as Record<string, JsonObject>).map(\n                ([key, value], index, list) => (\n                  <React.Fragment key={index}>\n                    {repeatTabSpace(tabSpaceRepeatTimes + 1)}\n                    <span\n                      className={propertyClassName}\n                      style={propertyStyle}\n                    >{`\"${key}\": `}</span>\n                    {categorize(value, tabSpaceRepeatTimes + 1)}\n                    {index !== list.length - 1 && (\n                      <span className={commaClassName} style={commaStyle}>\n                        ,\n                      </span>\n                    )}\n                    <br />\n                  </React.Fragment>\n                )\n              )}\n              {repeatTabSpace(tabSpaceRepeatTimes)}\n              <span className={braceClassName} style={braceStyle}>\n                {'}'}\n              </span>\n            </React.Fragment>\n          )\n        }\n\n        case '[object Array]': {\n          return (\n            <React.Fragment>\n              <span className={bracketClassName} style={bracketStyle}>\n                [\n              </span>\n              <br />\n              {(data as unknown as JsonObject[]).map((value, index, list) => (\n                <React.Fragment key={index}>\n                  {repeatTabSpace(tabSpaceRepeatTimes + 1)}\n                  {categorize(value, tabSpaceRepeatTimes + 1)}\n                  {index !== list.length - 1 && (\n                    <span className={commaClassName} style={commaStyle}>\n                      ,\n                    </span>\n                  )}\n                  <br />\n                </React.Fragment>\n              ))}\n              {repeatTabSpace(tabSpaceRepeatTimes)}\n              <span className={bracketClassName} style={bracketStyle}>\n                ]\n              </span>\n            </React.Fragment>\n          )\n        }\n\n        case '[object Null]': {\n          return (\n            <span className={nullClassName} style={nullStyle}>\n              null\n            </span>\n          )\n        }\n\n        default:\n          return <span>type error</span>\n      }\n    },\n    [\n      booleanClassName,\n      booleanStyle,\n      braceClassName,\n      braceStyle,\n      bracketClassName,\n      bracketStyle,\n      commaClassName,\n      commaStyle,\n      falseClassName,\n      falseStyle,\n      nullClassName,\n      nullStyle,\n      numberClassName,\n      numberStyle,\n      propertyClassName,\n      propertyStyle,\n      repeatTabSpace,\n      stringClassName,\n      stringStyle,\n      trueClassName,\n      trueStyle\n    ]\n  )\n\n  const result = useMemo(\n    () => categorize(jsonObject, 0),\n    [categorize, jsonObject]\n  )\n\n  return (\n    <div className={className} style={style}>\n      <div>{result}</div>\n    </div>\n  )\n}\n"],"names":["JsonFormatter","json","booleanClassName","braceClassName","bracketClassName","className","commaClassName","falseClassName","nullClassName","numberClassName","propertyClassName","stringClassName","tabSpaceClassName","trueClassName","booleanStyle","braceStyle","bracketStyle","commaStyle","falseStyle","nullStyle","numberStyle","propertyStyle","stringStyle","style","tabSpaceStyle","trueStyle","tabWith","jsonObject","useMemo","repeatTabSpace","useCallback","times","React","categorize","data","tabSpaceRepeatTimes","key","value","index","list","result"],"mappings":"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"}